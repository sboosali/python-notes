operators:
 # defines syntax for recursive-regex and/or operator-precedence grammar
 # in descending precedence

 - "[ ]"
 - '" "'

 - < where
 - ~ but
# - ~ as ~

 - :=
 - :-
 - "="
 - ["<", ">"]
 - ":"
 - "~"
 - v

 - [<-, ->]
 - [<--, -->]
 - [<=, =>, <==, ==>]
 - [<~, ~>]

 - "{ }"

 - [., .]
 - ","

 - ( )

 - ==
 - ["+", "-"]
 - ["*", "/"]
 - ^


min_spaces:
 __default__: 1

 ( )   : 0
 "[ ]" : 0
 "{ }" : 0

 = : 0

 +   : 0
 "-" : 0
 "*" : 0
 /   : 0
 ^   : 0


order:
 # sort lines by operator to show note

 - :=
 - :-
 - "="

 - <
 - ">"
 - < where
 - ":"

 - "~"
 - ~ but

 - ->
 - <-
 - ~>
 - <~
 - <--
 - -->
 - =>
 - <=
 - ==>
 - <==


# e.g. left chaining
#  x , y , z
#  (x , y) , z
#  x , z
#  x

chain:
 __default__: right

 # head operators

 ","     : left

 :=      : left
 :-      : left
 "="     : left
 "~"     : left

 ":"     : left
 "<"     : left
 ">"     : left

 < where : left
 ~ but   : left

 "+"     : join
 .       : join
