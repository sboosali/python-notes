precedence:
 # defines syntax for recursive-regex and/or operator-precedence grammar
 # in descending precedence (i.e. topmost binds most tightly)

 - "[  ]"
 - '"  "'

 -  < where
 -  ~ but

 - :=
 - :-
 - "="
 - "<"
 - ">"
 - ":"
 - "~"
 - v

 - <-
 - ->
 - <--
 - -->
 # - [=>, ==>]
 # - [<=, <==]
 - <~
 - ~>

 - "{ }"

 - .
 - ","

 - ( )

 - ++
 - --

 - ==
 - "+"
 - "-"
 - "*"
 - "/"
 - ^


tokens:
 # [{token: [verbose regex]}]
 # these regexes capture a line as an operand, keeping 0-space opeartors from wrongly parsing them

 - url:
    - |
      ((?P<scheme>https?|ftp):\/)?
      \/?
      ((?P<username>.*?)(:(?P<password>.*?)|)@)?
      (?P<hostname>([^:\/\s]+\.)+[^:\/\s]+)
      (?P<port>:([^\/]*))?
      (?P<path>(\/\w+)*\/)
      (?P<filename>[-\w.]+[^#?\s]*)?
      (?P<query>\?([^#]*))?
      (?P<fragment>#(.*))?

 - word:
    - not: |
           ([0-9]*?[\.\,]?[0-9]+?)
           ([\-+*/]([0-9]*?[\.\,]?[0-9]+?)+?)+?

    - |
      ([\-.+_/]?)?
      (\w+?[\-.+_/]+?)+
      (\w+)?

 - percent:
    - (?P<n>\w+)%


parsers:
 - ellipsis: (^|\s)(\.\.\.)($|\s)
 - comment: ^\w*\.
 - default: .*
