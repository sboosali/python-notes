operators:
 # defines syntax for recursive-regex and/or operator-precedence grammar
 # in descending precedence

 - "[ ]"
 - '" "'

 - < where
 - ~ but
# - ~ as ~

 - :=
 - :-
 - "="
 - ["<", ">"]
 - ":"
 - "~"
 - v

 - [<-, ->]
 - [<--, -->]
 - [=>, ==>]
 - [<=, <==]
 - [<~, ~>]

 - "{ }"

 - [., .]
 - ","

 - ( )

 - ++
 - --

 - src

 - ==
 - ["+", "+"]
 - "-"
 - ["*", "/"]
 - ^


min_spaces:
 __default__: 1

 ( )   : 0
 "[ ]" : 0
 "{ }" : 0

 +   : 0
 "-" : 0
 "*" : 0
 /   : 0
 ^   : 0


order:
 # sort lines by operator to show note

 - :=
 - :-
 - "="

 - <
 - ">"
 - < where
 - ":"

 - "~"
 - ~ but

 - ->
 - <-
 - ~>
 - <~
 - <--
 - -->
 - =>
 - <=
 - ==>
 - <==


# e.g. left chaining
#  x , y , z
#  (x , y) , z
#  x , z
#  x

chain:
 __default__: right

 # head operators

 ","     : left

 :=      : left
 :-      : left
 "="     : left
 "~"     : left

 ":"     : left
 "<"     : left
 ">"     : left

 < where : left
 ~ but   : left

 +       : join
 "-"     : join
 "*"     : join
 /       : join
 .       : join


parsers:
 - src


tokens:
 # these regexes capture a line as an operand, keeping 0-space opeartors from wrongly parsing them

 word:
  - ([\-.+_/]?)?(\w+?[\-.+_/]+?)+(\w+)?
  # looks/sounds/feels
  # 5-HT
  # Na+
  # 1..10
  # __str__

  - not: ([0-9]*?[\.\,]?[0-9]+?)([\-+*/]([0-9]*?[\.\,]?[0-9]+?)+?)+?
  # not 1.2+3.4

 #  - |
 #    ^
 #    (
 #     \w +?
 #     [\-.+_/]
 #    ) +?
 #    (\w +?)
 #    $

 url:
   - ((?P<scheme>https?|ftp):\/)?\/?((?P<username>.*?)(:(?P<password>.*?)|)@)?(?P<hostname>[^:\/\s]+)(?P<port>:([^\/]*))?(?P<path>(\/\w+)*\/)(?P<filename>[-\w.]+[^#?\s]*)?(?P<query>\?([^#]*))?(?P<fragment>#(.*))?
 # - |
 #   ^
 #   ((?P<scheme>https?|ftp):\/)?
 #   \/?
 #   ((?P<username>.*?)(:(?P<password>.*?)|)@)?
 #   (?P<hostname>[^:\/\s]+)
 #   (?P<port>:([^\/]*))?
 #   (?P<path>(\/\w+)*\/)
 #   (?P<filename>[-\w.]+[^#?\s]*)?
 #   (?P<query>\?([^#]*))?
 #   (?P<fragment>#(.*))?
 #   $
